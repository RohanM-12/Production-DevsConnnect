generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  mobileNo String @unique 
  name String 
  email String @unique
  password String
  collegeName String
  created_At DateTime @default(now())
  posts Posts[]
  contributionRequests ContributionRequests[]
  chatRooms ChatRoomMember[]
  messages Message[]
} 

model Posts {
  id Int @id @default(autoincrement()) 
  name String
  description String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId Int 
  gitHubLink String?
  deployedLink String?
  likes String[]  
  demoVideoLink String?
  thumbnailImgURL String?
  technologiesUsed String[]
  created_at DateTime @default(now())
  contributionRequests ContributionRequests[] 
  chatRoom ChatRoom?
}

model ContributionRequests {
  id Int @id @default(autoincrement())
  requesterId Int 
  postId Int
  status String
  interestDescription String
  rating Int @default(0)
  wishesToWorkOn String
  created_at DateTime @default(now())
  requester User @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  chatRoomId Int?  // Add this field to store the ChatRoom reference
  chatRoom ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  @@unique([requesterId, postId])
}

model ChatRoom {
  id Int @id @default(autoincrement())
  postId Int @unique
  created_at DateTime @default(now())
  post Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  members ChatRoomMember[]
  messages Message[]
  contributionRequests ContributionRequests[] // This can stay as it is
}

model ChatRoomMember {
  id Int @id @default(autoincrement())
  userId Int
  chatRoomId Int
  joined_at DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  @@unique([userId, chatRoomId])
}

model Message {
  id Int @id @default(autoincrement())
  chatRoomId Int
  senderId Int
  content String
  sent_at DateTime @default(now())
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
